
config {
  type: "table",
  tags: ["SolarSystemBody"],
  uniqueKey: ["MoonId"],
  schema: "SolarSystemBody", 
  description: "This table stores physical and orbital characteristics of natural satellites including moons orbiting planets and other celestial bodies in our solar system sourced from the System Solaire open-source API at https://api.le-systeme-solaire.net/en/ ",
  columns: {
    MoonId: "Unique identifier for each moon formatted as a 3-digit number where the first digit represents the host planet ID and the last two digits represent the moon''s sequence number for that planet",
    MoonName: "English name of the moon or natural satellite",
    OrbitingBody: "Name of the celestial body that this moon orbits, which includes these values: 'Terre', 'Mars', 'Jupiter', 'Saturne', 'Uranus', 'Neptune' or other dwarf planets",
    PlanetId: "Foreign key linking to the planet this moon orbits, where null indicates the moon orbits a non-planetary body",
    Gravity: "Surface gravity of the moon measured in meters per second squared (m/s²)",
    Mass: "Total mass of the moon measured in kilograms (kg)",
    Volume: "Total volume of the moon measured in cubic kilometers (km³)",
    Density: "Average density of the moon measured in grams per cubic centimeter (g/cm³)",
    AverageSurfaceTemperature: "Mean surface temperature of the moon measured in Kelvin (K)",
    AxialTilt: "Angle between the moon''s rotational axis and its orbital axis measured in degrees",
    Eccentricity: "Measure of how much the moon''s orbit deviates from circular, where 0 is perfectly circular",
    Perihelion: "Closest distance between the moon and its orbiting body measured in kilometers (km)",
    Aphelion: "Farthest distance between the moon and its orbiting body measured in kilometers (km)"
  }
}

with PreparePlanetId as 
(
  select
    englishName as MoonName
    , aroundPlanet.planet as OrbitingBody
    -- Assign PlanetId for moons that orbit solar system planets
    -- The data are sourced from a French source, so spellings are slightly different
    , case
        when aroundPlanet.Planet = 'terre'
          then 3
        when aroundPlanet.Planet = 'mars'
          then 4
        when aroundPlanet.Planet = 'jupiter'
          then 5
        when aroundPlanet.Planet = 'saturne'
          then 6
        when aroundPlanet.Planet = 'uranus'
          then 7
        when aroundPlanet.Planet = 'neptune'
          then 8
      else null 
    end as PlanetId
    , gravity as Gravity
    , mass.MassValue as Mass
    , vol.volValue as Volume
    , density as Density
    , avgTemp as AverageSurfaceTemperature
    , axialTilt as AxialTilt
    , eccentricity as Eccentricity
    , perihelion as Perihelion 
    , aphelion as Aphelion
  from ${ref("RawMoon")}
)

, PrepareMoonId as 
(
  select
    -- Use PlanetId as base for MoonId and then increment by this partition
    -- For satellites of non-planetary bodies like Plut or Makemake, group these via a pseudo PlanetId 9 for now
    concat(coalesce(PlanetId,9),row_number() over (partition by PlanetId order by MoonName)) as MoonId
    , MoonName
    , OrbitingBody
    , PlanetId
    , Gravity
    , Mass
    , Volume
    , Density
    , AverageSurfaceTemperature
    , AxialTilt
    , Eccentricity
    , Perihelion 
    , Aphelion
  from PreparePlanetId
)

select
  -- Standardizing MoonId to be 3 digits as no bodies have more than 999 moons and converting to int
  case
    when length(MoonId) = 2
      then cast(concat(substr(MoonId,1,1), '00', substr(MoonId,2)) as int64)
    when length(MoonId) = 3
      then cast(concat(substr(MoonId,1,1), '0', substr(MoonId,2)) as int64)
    else cast(MoonId as int64)
  end as MoonId
  , MoonName
  , initcap(OrbitingBody) as OrbitingBody
  , PlanetId
  , Gravity
  , Mass
  , Volume
  , Density
  , AverageSurfaceTemperature
  , AxialTilt
  , Eccentricity
  , Perihelion 
  , Aphelion
from PrepareMoonId
